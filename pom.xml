<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <modules>
        <module>merchant-object</module>
        <module>merchant-domain</module>
        <module>merchant-restapi</module>
        <module>merchant-client</module>
        <module>merchant-web</module>
        <module>merchant-eureka_master</module>
        <module>merchant-eureka_salve1</module>
        <module>merchant-eureka_salve2</module>
    </modules>

    <!--使用父级配置 表明此是springboot项目 且指定了版本号-->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.1.5.RELEASE</version>
    </parent>

    <groupId>com.leiwu.study.springcloud</groupId>
    <artifactId>merchant-microservice</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>pom</packaging>

    <properties>
        <!--源代码和输出编码都是用UTF-8 保证在中文环境中源代码编辑和程序运行的日志输出中都不会出现乱码的情况-->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <!--指定java版本为1.8-->
        <java.version>1.8</java.version>
        <!--指定springCloud版本为Greenwich.SR1-->
        <spring.cloud.version>Greenwich.SR1</spring.cloud.version>
    </properties>

    <!--指定版本号-->
    <dependencyManagement>
        <dependencies>
            <!--指定springCloud所有依赖的版本 这里使用pom+import达到了简化代码、解决单继承问题 具体请看 https://blog.csdn.net/mn960mn/article/details/50894022-->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring.cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <!--通用配置 为所有模块设置默认的依赖引用-->
    <dependencies>
        <!--这是Spring Boot的核心启动器，包含了自动配置、日志和YAML。 具体请看 https://blog.csdn.net/shuxing520/article/details/78213862-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
        </dependency>

        <!--监控系统健康情况的工具 https://www.jianshu.com/p/481134c3fab7-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

        <!--将测试组件的范围定义为test 保证这些组件只是作为测试使用 而不会被放进发行包之中-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <!--使用统一的构建插件配置 如果模块中没有相关的构建配置 将默认使用此配置-->
    <build>
        <plugins>
            <!--spring boot打包插件 可将maven项目打包为springboot项目 启动时使用java -jar xxx.jar-->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>

            <!--测试插件surefire的配置忽略了在工程构建时对测试用例的调用-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.22.2</version>
                <configuration>
                    <skipTests>true</skipTests>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>